function [song_id]=identify_song(clip,fingerprints)

%  This function requires the global variables 'hashtable' and 'numSongs'
%  in order to work properly.


global hashtable
global numSongs

hashTableSize = size(hashtable,1);
numSongs=150;

% Find peak pairs from the clip
clipPeaks = fingerprint(clip);
clipTuples = convert_to_pairs(clipPeaks);

% Construct the cell of matches
matches = cell(numSongs,1);
for k = 1:size(clipTuples, 1)
    % CALCULATE HASH
    clipHash = simple_hash(clipTuples(k,3),clipTuples(k,4), clipTuples(k,2)-clipTuples(k,1), hashTableSize);
    
    % If an entry exists with this hash, find the song(s) with matching peak pairs
    if (~isempty(hashtable{clipHash, 1}))
        matchID = hashtable{clipHash, 1}; % row vector of collisions
        matchTime = hashtable{clipHash, 2}; %vector times t1 where the matches occurred in database
        
        % Calculate the time difference between clip pair and song pair
        offset=matchTime-clipTuples(k,1); %row vector,timing offsets=matchtime-t1, or the difference between 
        %t1 for the song and t1 for the clip should be same for all correct
        %match.
                
        % Add matches to the lists for each individual song
        for n = 1:numSongs
                    location=find(matchID==n);%find the location where n appears, and use this location to find all the offset belongs to song n in offset matrix
                    for m=1:1:length(location) %for each index
                        j=location(m);% get the index
                    empty=find(isempty(matches{n})==1);% find the null item in matches matrix,and this is the place we insert new items
                    matches{n}(empty+m-1)=offset(j);% put all the offset for one song in matches matrix
                    end
         end
    end
end

% Find the counts of the mode of the time offset array for each song
% row vector
occurValue=zeros(1,numSongs);% offset
occurFreq=zeros(1,numSongs);
for k = 1:numSongs
    [occurValue,occurFreq]=mode(matches{k});
end


% Song decision: find the most occurrences of any single offset
% or find the max occurFreq
[maxFreq,maxIndex]=max(occurFreq);
bestMatchID=maxIndex;
matchOffset=occurValue(maxIndex);

% confidence or correction of match

if length(bestMatchID)==1
    confidence=1;
else
    confidence=1/length(bestMatchID);
end
song_id=bestMatchID;

optional_plot = 0; % turn plot on or off

if optional_plot
    figure(3)
    clf
    y = zeros(length(matches),1);
    for k = 1:length(matches)
        subplot(length(matches),1,k)
        hist(matches{k},1000)
        y(k) = max(hist(matches{k},1000));
    end
    
    for k = 1:length(matches)
        subplot(length(matches),1,k)
        axis([-inf, inf, 0, max(y)])
    end

    subplot(length(matches),1,1)
    title('Histogram of offsets for each song')
end

end

